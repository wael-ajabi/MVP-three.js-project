// import React from "react";
// import * as THREE from "three";
// import { OrbitControls } from "three/examples/jsm/controls/OrbitControls.js";
// const Vis = () => {
// 	const { useRef, useEffect, useState } = React;
// 	const mount = useRef(null);
// 	const [isAnimating, setAnimating] = useState(true);
// 	const controlsAnimation = useRef(null);

// 	useEffect(() => {
// 		let width = mount.current.clientWidth;
// 		let height = mount.current.clientHeight;
// 		let frameId;

// 		const scene = new THREE.Scene();
// 		const camera = new THREE.PerspectiveCamera(
// 			75,
// 			width / height,
// 			0.1,
// 			1000
// 		);
// 		const renderer = new THREE.WebGLRenderer({ antialias: true });
// 		const geometry = new THREE.BoxGeometry(1, 1, 1);
// 		const material = new THREE.MeshBasicMaterial({ color: 0x00ff });
// 		const cube = new THREE.Mesh(geometry, material);

// 		camera.position.z = 4;
// 		scene.add(cube);
// 		renderer.setClearColor("0x2929");
// 		renderer.setSize(width, height);

// 		const renderScene = () => {
// 			renderer.render(scene, camera);
// 		};

// 		const controls = new OrbitControls(camera, renderer.domElement);
// 		controls.enableDamping = true;

// 		const handleResize = () => {
// 			width = mount.current.clientWidth;
// 			height = mount.current.clientHeight;
// 			renderer.setSize(width, height);
// 			camera.aspect = width / height;
// 			camera.updateProjectionMatrix();
// 			renderScene();
// 		};

// 		const animate = () => {
// 			cube.rotation.x += 0.01;
// 			cube.rotation.y += 0.01;

// 			renderScene();
// 			frameId = window.requestAnimationFrame(animate);
// 		};

// 		const start = () => {
// 			if (!frameId) {
// 				frameId = requestAnimationFrame(animate);
// 			}
// 		};

// 		const stop = () => {
// 			cancelAnimationFrame(frameId);
// 			frameId = null;
// 		};

// 		mount.current.appendChild(renderer.domElement);
// 		window.addEventListener("resize", handleResize);
// 		start();

// 		controlsAnimation.current = { start, stop };

// 		return () => {
// 			stop();
// 			window.removeEventListener("resize", handleResize);
// 			mount.current.removeChild(renderer.domElement);

// 			scene.remove(cube);
// 			geometry.dispose();
// 			material.dispose();
// 		};
// 	}, []);

// 	useEffect(() => {
// 		if (isAnimating) {
// 			controlsAnimation.current.start();
// 		} else {
// 			controlsAnimation.current.stop();
// 		}
// 	}, [isAnimating]);

// 	return (
// 		<div
// 			className='vis'
// 			ref={mount}
// 			onClick={() => setAnimating(!isAnimating)}
// 		/>
// 	);
// };

// export default Vis;
